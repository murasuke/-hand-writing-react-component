{"version":3,"sources":["HandWrinting.tsx","App.tsx","index.tsx"],"names":["HandWriting","props","canvas","useRef","useState","drawing","setDrawing","useEffect","ctx","current","getContext","clearRect","width","height","onUpdateCanvas","clear","lineWidth","lineCap","strokeStyle","lineColor","endDrawing","ref","onMouseDown","e","nativeEvent","x","offsetX","y","offsetY","beginPath","moveTo","onMouseMove","lineTo","stroke","onMouseUp","onMouseLeave","defaultProps","App","React","dataUrl","setDataUrl","settings","setSettings","htmlFor","name","value","onChange","prev","parseInt","target","map","i","type","onClick","toDataURL","id","alt","src","dlLink","document","createElement","href","download","click","remove","ReactDOM","render","StrictMode","getElementById"],"mappings":"mLAuBMA,EAA8C,SAACC,GAEnD,IAAMC,EAASC,iBAAO,MAFuC,EAI/BC,oBAAS,GAJsB,mBAItDC,EAJsD,KAI7CC,EAJ6C,KAO7DC,qBAAU,WACR,IAAMC,EAAON,EAAOO,QAA8BC,WAAW,MACzDF,IACFA,EAAIG,UAAU,EAAG,EAAGV,EAAMW,MAAOX,EAAMY,QACnCZ,EAAMa,gBAAgBb,EAAMa,eAAeZ,EAAOO,YAEvD,CAACR,EAAMc,QAGV,IAAML,EAAa,WACjB,IAAMF,EAAON,EAAOO,QAA8BC,WAAW,MAI7D,OAHAF,EAAIQ,UAAYf,EAAMe,UACtBR,EAAIS,QAAUhB,EAAMgB,QACpBT,EAAIU,YAAcjB,EAAMkB,UACjBX,GAuBHY,EAAa,WACjBd,GAAW,GACPL,EAAMa,gBAAgBb,EAAMa,eAAeZ,EAAOO,UAGxD,OACE,mCACE,wBAAQY,IAAKnB,EACXU,MAAOX,EAAMW,MAAOC,OAAQZ,EAAMY,OAClCS,YA5BqC,SAACC,GAAQ,IAAD,EACdA,EAAEC,YAApBC,EADgC,EACzCC,QAAqBC,EADoB,EAC7BC,QACpBtB,GAAW,GACX,IAAME,EAAME,IACZF,EAAIqB,YACJrB,EAAIsB,OAAOL,EAAGE,IAwBVI,YApBqC,SAACR,GAC1C,GAAKlB,EAAL,CADgD,MAGbkB,EAAEC,YAApBC,EAH+B,EAGxCC,QAAqBC,EAHmB,EAG5BC,QACdpB,EAAME,IACZF,EAAIwB,OAAOP,EAAGE,GACdnB,EAAIyB,WAeAC,UAAWd,EACXe,aAAcf,OAMtBpB,EAAYoC,aAAe,CACzBxB,MAAO,IACPC,OAAQ,IACRG,UAAW,GACXG,UAAW,qBACXF,QAAS,SAGIjB,QChBAqC,MA1Ef,WAAgB,IAAD,EACiBC,IAAMlC,SAAS,MADhC,mBACNmC,EADM,KACGC,EADH,OAEmBF,IAAMlC,SAAS,CAACY,UAAU,EAAGG,UAAW,UAAWJ,OAAO,IAF7E,mBAEN0B,EAFM,KAEIC,EAFJ,KA2Cb,OACE,qCACE,+IACA,gCACE,uFACE,gCACE,uBAAOC,QAAQ,YAAf,4CACA,wBAAQC,KAAK,YAAYC,MAAOJ,EAASzB,UAAW8B,SA5BzC,SAACvB,GACpBmB,GAAa,SAAAK,GACX,OAAO,2BAAIA,GAAX,IAAiB/B,UAAWgC,SAASzB,EAAE0B,OAAOJ,MAAO,UA0B/C,SARQ,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,GAAG,IASZK,KAAI,SAACC,GAAD,OAAM,wBAAgBN,MAAOM,EAAvB,SAA2BA,GAAdA,QAHtC,WAME,uBAAOR,QAAQ,YAAf,0BACA,uBAAOC,KAAK,YAAYQ,KAAK,QAAQP,MAAOJ,EAAStB,UAAW2B,SA1B1D,SAACvB,GACfmB,GAAa,SAAAK,GACX,OAAO,2BAAIA,GAAX,IAAiB5B,UAAWI,EAAE0B,OAAOJ,cAiBjC,WASE,wBAAQQ,QArBI,WACpBX,GAAa,SAAAK,GACX,OAAO,2BAAIA,GAAX,IAAiBhC,OAAQgC,EAAKhC,YAmBxB,mCAEF,cAAC,EAAD,aAAaD,eAtDE,SAACS,GAItBiB,EAAWjB,EAAE+B,UAAU,gBAkDgCb,OAErD,gCACE,mMACE,qBAAKc,GAAG,SAASC,IAAI,GAAGC,IAAKlB,OAEjC,8BACE,wBAAQa,KAAK,SAASC,QArDA,WAC1B,IAAMK,EAASC,SAASC,cAAc,KACtCF,EAAOG,KAAOtB,EACdmB,EAAOI,SAAW,kBAClBJ,EAAOK,QACPL,EAAOM,UAgDH,gICjERC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFR,SAASS,eAAe,W","file":"static/js/main.e1d99832.chunk.js","sourcesContent":["import React, { useRef, useState, useEffect } from \"react\";\n\n/**\n * 手書きコンポーネントprops定義\n */\nexport type HandWritingAttribute = {\n  width?: number,\n  height?: number,\n  lineWidth?: number,\n  lineColor?: string,\n  lineCap?: CanvasLineCap,\n  clear?: boolean,\n  onUpdateCanvas?: (e: HTMLCanvasElement) => void,\n}\n\n/**\n * 手書きコンポーネント(ドラッグ中線を描画する)\n * ・props経由で、線の太さ、色を指定\n * ・onUpdateCanvas()で線描画毎にコールバック\n * ・props.clearの値をトグルする毎にクリア\n * @param props \n * @returns \n */\nconst HandWriting: React.FC<HandWritingAttribute> = (props) => {\n  // canvasはDOMを直接操作するためuseRef()経由で操作する\n  const canvas = useRef(null);\n  // ドラッグ中判断フラグ(マウスを離すか、canvas外へ出たらfalse)\n  const [drawing, setDrawing] = useState(false);\n\n  // 領域クリア用。親コンポーネントでclearの値を変更するとcanvasをクリアする(toggle時常にクリア)\n  useEffect(() => {\n    const ctx = (canvas.current as HTMLCanvasElement).getContext('2d');\n    if( ctx ) {\n      ctx.clearRect(0, 0, props.width, props.height);\n      if (props.onUpdateCanvas) props.onUpdateCanvas(canvas.current);\n    }\n  }, [props.clear]);\n\n  // 描画に必要なcontextを取得し、線の色、幅をセットする\n  const getContext = () => {\n    const ctx = (canvas.current as HTMLCanvasElement).getContext('2d');\n    ctx.lineWidth = props.lineWidth;\n    ctx.lineCap = props.lineCap;\n    ctx.strokeStyle = props.lineColor;\n    return ctx;\n  }\n  \n  // 線描画開始処理。beginPath()で新しいパスを開始する(開始しないと色や太さが変更できない)\n  const mouseDown: React.MouseEventHandler = (e) =>  {\n    const { offsetX: x ,offsetY: y } = e.nativeEvent;\n    setDrawing(true);\n    const ctx = getContext();\n    ctx.beginPath();\n    ctx.moveTo(x, y);\n  }\n\n  // マウスの動きに合わせて線を描画する\n  const mouseMove: React.MouseEventHandler = (e) => {\n    if (!drawing) return;\n\n    const { offsetX: x ,offsetY: y } = e.nativeEvent;\n    const ctx = getContext();\n    ctx.lineTo(x, y);\n    ctx.stroke();\n  } \n\n  // 線描画完了(canvas更新イベントコールバックを行う)\n  const endDrawing = () => {\n    setDrawing(false);\n    if (props.onUpdateCanvas) props.onUpdateCanvas(canvas.current);\n  }\n\n  return (\n    <>\n      <canvas ref={canvas}\n        width={props.width} height={props.height}\n        onMouseDown={mouseDown} \n        onMouseMove={mouseMove} \n        onMouseUp={endDrawing} \n        onMouseLeave={endDrawing} />\n    </>\n  );\n};\n\n// propsのデフォルト値を設定\nHandWriting.defaultProps = {\n  width: 500,\n  height: 300,\n  lineWidth: 10,\n  lineColor: \"rgb(100, 100, 100)\",\n  lineCap: \"round\",\n};\n\nexport default HandWriting;\n","import React from 'react';\nimport HandWriting from './HandWrinting';\n\nfunction App() {\n  const [dataUrl, setDataUrl] = React.useState(null);\n  const [settings, setSettings] = React.useState({lineWidth:7, lineColor: '#5555bb', clear: false})\n  \n  // 画像コンポーネント更新コールバック\n  const onUpdateCanvas = (e: HTMLCanvasElement) => {\n    // 画像をstateに保存し下記の用途で利用する\n    //  ⇒<img>タグに表示\n    //  ⇒画像のダウンロード\n    setDataUrl(e.toDataURL('image/png'));\n  }\n\n  // 画像ダウンロード\n  const downloadCanvasImage = () => {\n    const dlLink = document.createElement(\"a\"); \n    dlLink.href = dataUrl;\n    dlLink.download = 'handwriting.png';\n    dlLink.click();\n    dlLink.remove();  \n  }\n\n  // 手書きコンポーネント線の幅変更\n  const setLineWidth = (e:  React.ChangeEvent<HTMLSelectElement>) => {\n    setSettings( prev => {\n      return {...prev, lineWidth: parseInt(e.target.value, 10)}\n    });\n  }\n\n  // 手書きコンポーネント線の色変更\n  const setColor= (e:  React.ChangeEvent<HTMLInputElement>) => {\n    setSettings( prev => {\n      return {...prev, lineColor: e.target.value}\n    });\n  }\n\n  // 手書きコンポーネントクリア\n  const clearComponent= () => {\n    setSettings( prev => {\n      return {...prev, clear: !prev.clear}\n    });\n  }\n\n  const lineWidth = [1,2,3,5,7,10,14,20];\n  return (\n    <>\n      <h1>HandWriting(手書き)コンポーネント利用サンプル</h1>\n      <div>\n        <h2>HandWritingコンポーネント</h2>\n          <div>\n            <label htmlFor=\"lineWidth\">線の太さ：</label>\n            <select name=\"lineWidth\" value={settings.lineWidth} onChange={setLineWidth}>\n              {lineWidth.map((i) =><option key={i} value={i}>{i}</option>)}\n            </select>\n            &nbsp;&nbsp;\n            <label htmlFor=\"lineColor\">色：</label>\n            <input name=\"lineColor\" type=\"color\" value={settings.lineColor} onChange={setColor}></input>\n            &nbsp;&nbsp;\n            <button onClick={clearComponent}>クリア</button>\n          </div>\n          <HandWriting onUpdateCanvas={onUpdateCanvas} {...settings} />\n      </div>\n      <div>\n        <h2>手書きコンポーネントの更新イベントサンプル(imgタグに反映)</h2>\n          <img id=\"newImg\" alt=\"\" src={dataUrl} />\n      </div>\n      <div>\n        <button type=\"button\" onClick={downloadCanvasImage}>\n          手書きコンポーネント画像ダウンロード\n        </button>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}